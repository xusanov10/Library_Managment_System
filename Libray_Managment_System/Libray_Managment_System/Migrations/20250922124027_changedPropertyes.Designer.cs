// <auto-generated />
using System;
using Library_Managment_System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Libray_Managment_System.Migrations
{
    [DbContext(typeof(LibraryManagmentSystemContext))]
    [Migration("20250922124027_changedPropertyes")]
    partial class changedPropertyes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "bookcopystatus", new[] { "Available", "Borrowed", "Reserved", "Lost" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "borrowstatus", new[] { "Borrowed", "Returned", "Overdue" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "reporttype", new[] { "Daily", "Monthly", "Yearly", "Custom" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "reservationstatus", new[] { "Pending", "Approved", "Cancelled" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Libray_Managment_System.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Birthyear")
                        .HasColumnType("text")
                        .HasColumnName("birthyear");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("country");

                    b.Property<string>("Deathyear")
                        .HasColumnType("text")
                        .HasColumnName("deathyear");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("fullname");

                    b.HasKey("Id")
                        .HasName("authors_pkey");

                    b.ToTable("authors", (string)null);
                });

            modelBuilder.Entity("Libray_Managment_System.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Authorid")
                        .HasColumnType("integer")
                        .HasColumnName("authorid");

                    b.Property<int>("Categoryid")
                        .HasColumnType("integer")
                        .HasColumnName("categoryid");

                    b.Property<DateTime?>("Createdat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Filepath")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("filepath");

                    b.Property<string>("Isbn")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("isbn");

                    b.Property<string>("Publishedyear")
                        .HasColumnType("text")
                        .HasColumnName("publishedyear");

                    b.Property<int>("Publisherid")
                        .HasColumnType("integer")
                        .HasColumnName("publisherid");

                    b.Property<int?>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("quantity");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("books_pkey");

                    b.HasIndex("Authorid");

                    b.HasIndex("Categoryid");

                    b.HasIndex("Publisherid");

                    b.HasIndex(new[] { "Isbn" }, "books_isbn_key")
                        .IsUnique();

                    b.ToTable("books", (string)null);
                });

            modelBuilder.Entity("Libray_Managment_System.Models.Bookcopy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Bookid")
                        .HasColumnType("integer")
                        .HasColumnName("bookid");

                    b.Property<int>("Copynumber")
                        .HasColumnType("integer")
                        .HasColumnName("copynumber");

                    b.Property<int>("Status")
                        .HasColumnType("bookcopystatus");

                    b.HasKey("Id")
                        .HasName("bookcopies_pkey");

                    b.HasIndex("Bookid");

                    b.ToTable("bookcopies", (string)null);
                });

            modelBuilder.Entity("Libray_Managment_System.Models.Borrowrecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Bookcopyid")
                        .HasColumnType("integer")
                        .HasColumnName("bookcopyid");

                    b.Property<DateTime?>("Borrowdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("borrowdate")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("Duedate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("duedate");

                    b.Property<decimal?>("Penalty")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("penalty")
                        .HasDefaultValueSql("0");

                    b.Property<DateTime?>("Returndate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("returndate");

                    b.Property<int>("Status")
                        .HasColumnType("borrowstatus");

                    b.Property<int>("Userid")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("borrowrecords_pkey");

                    b.HasIndex("Bookcopyid");

                    b.HasIndex("Userid");

                    b.ToTable("borrowrecords", (string)null);
                });

            modelBuilder.Entity("Libray_Managment_System.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("categories_pkey");

                    b.HasIndex(new[] { "Name" }, "categories_name_key")
                        .IsUnique();

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("Libray_Managment_System.Models.Fine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("amount");

                    b.Property<int>("Borrowrecordid")
                        .HasColumnType("integer")
                        .HasColumnName("borrowrecordid");

                    b.Property<DateTime?>("Createdat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("Paid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("paid");

                    b.Property<int>("Userid")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("fines_pkey");

                    b.HasIndex("Borrowrecordid");

                    b.HasIndex("Userid");

                    b.ToTable("fines", (string)null);
                });

            modelBuilder.Entity("Libray_Managment_System.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Createdat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("Isread")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("isread");

                    b.Property<string>("Message")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("message");

                    b.Property<int>("Userid")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("notifications_pkey");

                    b.HasIndex("Userid");

                    b.ToTable("notifications", (string)null);
                });

            modelBuilder.Entity("Libray_Managment_System.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("amount");

                    b.Property<int>("Fineid")
                        .HasColumnType("integer")
                        .HasColumnName("fineid");

                    b.Property<string>("Method")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("method");

                    b.Property<DateTime?>("Paymentdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("paymentdate")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Userid")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("payments_pkey");

                    b.HasIndex("Fineid");

                    b.HasIndex("Userid");

                    b.ToTable("payments", (string)null);
                });

            modelBuilder.Entity("Libray_Managment_System.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("permissions_pkey");

                    b.HasIndex(new[] { "Name" }, "permissions_name_key")
                        .IsUnique();

                    b.ToTable("permissions", (string)null);
                });

            modelBuilder.Entity("Libray_Managment_System.Models.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address");

                    b.Property<string>("Contactinfo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("contactinfo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("publishers_pkey");

                    b.ToTable("publishers", (string)null);
                });

            modelBuilder.Entity("Libray_Managment_System.Models.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Filepath")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("filepath");

                    b.Property<DateTime?>("Generatedat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("generatedat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Generatedby")
                        .HasColumnType("integer")
                        .HasColumnName("generatedby");

                    b.Property<int>("Reporttype")
                        .HasColumnType("reporttype");

                    b.Property<string>("Title")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("reports_pkey");

                    b.HasIndex("Generatedby");

                    b.ToTable("reports", (string)null);
                });

            modelBuilder.Entity("Libray_Managment_System.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Bookcopyid")
                        .HasColumnType("integer")
                        .HasColumnName("bookcopyid");

                    b.Property<DateTime?>("Reserveddate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("reserveddate")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Status")
                        .HasColumnType("reservationstatus");

                    b.Property<int>("Userid")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("reservations_pkey");

                    b.HasIndex("Bookcopyid");

                    b.HasIndex("Userid");

                    b.ToTable("reservations", (string)null);
                });

            modelBuilder.Entity("Libray_Managment_System.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("roles_pkey");

                    b.HasIndex(new[] { "Name" }, "roles_name_key")
                        .IsUnique();

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Libray_Managment_System.Models.Rolepermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Permissionid")
                        .HasColumnType("integer")
                        .HasColumnName("permissionid");

                    b.Property<int>("Roleid")
                        .HasColumnType("integer")
                        .HasColumnName("roleid");

                    b.HasKey("Id")
                        .HasName("rolepermissions_pkey");

                    b.HasIndex("Permissionid");

                    b.HasIndex("Roleid");

                    b.ToTable("rolepermissions", (string)null);
                });

            modelBuilder.Entity("Libray_Managment_System.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Createdat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("email");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("fullname");

                    b.Property<string>("Passwordhash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("passwordhash");

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("users_pkey");

                    b.HasIndex(new[] { "Email" }, "users_email_key")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Libray_Managment_System.Models.Userprofile", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address");

                    b.Property<DateOnly?>("Birthdate")
                        .HasColumnType("date")
                        .HasColumnName("birthdate");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("gender");

                    b.Property<string>("Phonenumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("phonenumber");

                    b.HasKey("Id")
                        .HasName("userprofiles_pkey");

                    b.ToTable("userprofiles", (string)null);
                });

            modelBuilder.Entity("Libray_Managment_System.Models.Userrole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Roleid")
                        .HasColumnType("integer")
                        .HasColumnName("roleid");

                    b.Property<int>("Userid")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("userroles_pkey");

                    b.HasIndex("Roleid");

                    b.HasIndex("Userid");

                    b.ToTable("userroles", (string)null);
                });

            modelBuilder.Entity("Libray_Managment_System.Models.Book", b =>
                {
                    b.HasOne("Libray_Managment_System.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("Authorid")
                        .IsRequired()
                        .HasConstraintName("books_authorid_fkey");

                    b.HasOne("Libray_Managment_System.Models.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("Categoryid")
                        .IsRequired()
                        .HasConstraintName("books_categoryid_fkey");

                    b.HasOne("Libray_Managment_System.Models.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("Publisherid")
                        .IsRequired()
                        .HasConstraintName("books_publisherid_fkey");

                    b.Navigation("Author");

                    b.Navigation("Category");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("Libray_Managment_System.Models.Bookcopy", b =>
                {
                    b.HasOne("Libray_Managment_System.Models.Book", "Book")
                        .WithMany("Bookcopies")
                        .HasForeignKey("Bookid")
                        .IsRequired()
                        .HasConstraintName("bookcopies_bookid_fkey");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Libray_Managment_System.Models.Borrowrecord", b =>
                {
                    b.HasOne("Libray_Managment_System.Models.Bookcopy", "Bookcopy")
                        .WithMany("Borrowrecords")
                        .HasForeignKey("Bookcopyid")
                        .IsRequired()
                        .HasConstraintName("borrowrecords_bookcopyid_fkey");

                    b.HasOne("Libray_Managment_System.Models.User", "User")
                        .WithMany("Borrowrecords")
                        .HasForeignKey("Userid")
                        .IsRequired()
                        .HasConstraintName("borrowrecords_userid_fkey");

                    b.Navigation("Bookcopy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Libray_Managment_System.Models.Fine", b =>
                {
                    b.HasOne("Libray_Managment_System.Models.Borrowrecord", "Borrowrecord")
                        .WithMany("Fines")
                        .HasForeignKey("Borrowrecordid")
                        .IsRequired()
                        .HasConstraintName("fines_borrowrecordid_fkey");

                    b.HasOne("Libray_Managment_System.Models.User", "User")
                        .WithMany("Fines")
                        .HasForeignKey("Userid")
                        .IsRequired()
                        .HasConstraintName("fines_userid_fkey");

                    b.Navigation("Borrowrecord");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Libray_Managment_System.Models.Notification", b =>
                {
                    b.HasOne("Libray_Managment_System.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("Userid")
                        .IsRequired()
                        .HasConstraintName("notifications_userid_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Libray_Managment_System.Models.Payment", b =>
                {
                    b.HasOne("Libray_Managment_System.Models.Fine", "Fine")
                        .WithMany("Payments")
                        .HasForeignKey("Fineid")
                        .IsRequired()
                        .HasConstraintName("payments_fineid_fkey");

                    b.HasOne("Libray_Managment_System.Models.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("Userid")
                        .IsRequired()
                        .HasConstraintName("payments_userid_fkey");

                    b.Navigation("Fine");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Libray_Managment_System.Models.Report", b =>
                {
                    b.HasOne("Libray_Managment_System.Models.User", "GeneratedbyNavigation")
                        .WithMany("Reports")
                        .HasForeignKey("Generatedby")
                        .IsRequired()
                        .HasConstraintName("reports_generatedby_fkey");

                    b.Navigation("GeneratedbyNavigation");
                });

            modelBuilder.Entity("Libray_Managment_System.Models.Reservation", b =>
                {
                    b.HasOne("Libray_Managment_System.Models.Bookcopy", "Bookcopy")
                        .WithMany("Reservations")
                        .HasForeignKey("Bookcopyid")
                        .IsRequired()
                        .HasConstraintName("reservations_bookcopyid_fkey");

                    b.HasOne("Libray_Managment_System.Models.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("Userid")
                        .IsRequired()
                        .HasConstraintName("reservations_userid_fkey");

                    b.Navigation("Bookcopy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Libray_Managment_System.Models.Rolepermission", b =>
                {
                    b.HasOne("Libray_Managment_System.Models.Permission", "Permission")
                        .WithMany("Rolepermissions")
                        .HasForeignKey("Permissionid")
                        .IsRequired()
                        .HasConstraintName("rolepermissions_permissionid_fkey");

                    b.HasOne("Libray_Managment_System.Models.Role", "Role")
                        .WithMany("Rolepermissions")
                        .HasForeignKey("Roleid")
                        .IsRequired()
                        .HasConstraintName("rolepermissions_roleid_fkey");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Libray_Managment_System.Models.Userprofile", b =>
                {
                    b.HasOne("Libray_Managment_System.Models.User", "IdNavigation")
                        .WithOne("Userprofile")
                        .HasForeignKey("Libray_Managment_System.Models.Userprofile", "Id")
                        .IsRequired()
                        .HasConstraintName("userprofiles_id_fkey");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("Libray_Managment_System.Models.Userrole", b =>
                {
                    b.HasOne("Libray_Managment_System.Models.Role", "Role")
                        .WithMany("Userroles")
                        .HasForeignKey("Roleid")
                        .IsRequired()
                        .HasConstraintName("userroles_roleid_fkey");

                    b.HasOne("Libray_Managment_System.Models.User", "User")
                        .WithMany("Userroles")
                        .HasForeignKey("Userid")
                        .IsRequired()
                        .HasConstraintName("userroles_userid_fkey");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Libray_Managment_System.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Libray_Managment_System.Models.Book", b =>
                {
                    b.Navigation("Bookcopies");
                });

            modelBuilder.Entity("Libray_Managment_System.Models.Bookcopy", b =>
                {
                    b.Navigation("Borrowrecords");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Libray_Managment_System.Models.Borrowrecord", b =>
                {
                    b.Navigation("Fines");
                });

            modelBuilder.Entity("Libray_Managment_System.Models.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Libray_Managment_System.Models.Fine", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Libray_Managment_System.Models.Permission", b =>
                {
                    b.Navigation("Rolepermissions");
                });

            modelBuilder.Entity("Libray_Managment_System.Models.Publisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Libray_Managment_System.Models.Role", b =>
                {
                    b.Navigation("Rolepermissions");

                    b.Navigation("Userroles");
                });

            modelBuilder.Entity("Libray_Managment_System.Models.User", b =>
                {
                    b.Navigation("Borrowrecords");

                    b.Navigation("Fines");

                    b.Navigation("Notifications");

                    b.Navigation("Payments");

                    b.Navigation("Reports");

                    b.Navigation("Reservations");

                    b.Navigation("Userprofile");

                    b.Navigation("Userroles");
                });
#pragma warning restore 612, 618
        }
    }
}
